{"version":3,"sources":["Quote.js","RandomMachine.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","rgb","bind","r","Math","floor","random","g","b","colorDisplay","this","quote","encodeURIComponent","author","id","style","backgroundColor","href","target","rel","className","onClick","newQuote","Component","RandomMachine","state","length","getQuote","axios","get","res","quoteArray","data","quotes","randomQuote","randIdx","setState","class","defaultProps","numQuotesToGet","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2XA+CeA,G,wDA3Cd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,IAAM,EAAKA,IAAIC,KAAT,gBAFO,E,kDAKlB,IAAIC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACxB,MAAM,OAAN,OAAcH,EAAd,aAAoBI,EAApB,aAA0BC,EAA1B,O,+BAIA,IAAIC,EAAeC,KAAKT,MACpBU,EAAQC,mBAAmBF,KAAKV,MAAMW,OACtCE,EAASD,mBAAmBF,KAAKV,MAAMa,QAC3C,OACC,yBAAKC,GAAG,aACP,yBAAKA,GAAG,QAAQC,MAAO,CAAEC,gBAAiBP,IACzC,oCACC,uBAAGK,GAAG,QAAQJ,KAAKV,MAAMW,OACzB,4BAAQG,GAAG,UAAX,IAAsBJ,KAAKV,MAAMa,UAInC,yBAAKC,GAAG,mBACP,uBACCG,KAAI,iDAA4CN,EAA5C,aAAsDE,GAC1DK,OAAO,SACPC,IAAI,sBACJL,GAAG,cACHC,MAAO,CAAEC,gBAAiBP,IAE1B,uBAAGW,UAAU,oBAEd,4BAAQN,GAAG,YAAYO,QAASX,KAAKV,MAAMsB,SAAUP,MAAO,CAAEC,gBAAiBP,IAA/E,mB,GAnCec,cCEdC,G,wDAIF,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IACDyB,MAAM,CACPd,MAAM,GACNE,OAAO,IAJG,E,gEAWe,IAA1BH,KAAKe,MAAMd,MAAMe,QAAYhB,KAAKiB,a,qKAGvBC,IAAMC,IAAI,0I,OAApBC,E,OACAC,EAAWD,EAAIE,KAAKC,OAEpBC,EAAYH,EADJ,WAAK,OAAO3B,KAAKC,MAAMD,KAAKE,SAASyB,EAAWL,QACjCS,IAC3BzB,KAAK0B,SAAS,CACVzB,MAAOuB,EAAYvB,MACnBE,OAAQqB,EAAYrB,S,qIAKnB,IAAD,OAGJ,OACI,6BACI,uBAAGwB,MAAM,uBACT,kBAAC,EAAD,CAAO1B,MAAOD,KAAKe,MAAMd,MAAOE,OAAQH,KAAKe,MAAMZ,OAAQS,SAAU,kBAAI,EAAKK,mB,GAnClEJ,cAAtBC,EACKc,aAAa,CAChBC,eAAe,GAuCRf,Q,MClCAgB,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCKcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70fc7c20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Quote.css';\n\nclass Quote extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.rgb = this.rgb.bind(this);\n\t}\n\trgb() {\n\t\tlet r = Math.floor(Math.random() * 150);\n\t\tlet g = Math.floor(Math.random() * 150);\n\t\tlet b = Math.floor(Math.random() * 150);\n\t\treturn `rgb(${r}, ${g}, ${b})`;\n\t}\n\n\trender() {\n\t\tlet colorDisplay = this.rgb();\n\t\tlet quote = encodeURIComponent(this.props.quote);\n\t\tlet author = encodeURIComponent(this.props.author);\n\t\treturn (\n\t\t\t<div id=\"quote-box\">\n\t\t\t\t<div id=\"quote\" style={{ backgroundColor: colorDisplay }}>\n\t\t\t\t\t<blockquote>\n\t\t\t\t\t\t<p id=\"text\">{this.props.quote}</p>\n\t\t\t\t\t\t<footer id=\"author\">-{this.props.author}</footer>\n\t\t\t\t\t</blockquote>\n\t\t\t\t</div>\n\n\t\t\t\t<div id=\"quote-generator\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?text=\"${quote}\"-${author}`}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\tid=\"tweet-quote\"\n\t\t\t\t\t\tstyle={{ backgroundColor: colorDisplay }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<i className=\"fab fa-twitter\" />\n\t\t\t\t\t</a>\n\t\t\t\t\t<button id=\"new-quote\" onClick={this.props.newQuote} style={{ backgroundColor: colorDisplay }}>\n\t\t\t\t\t\tNew Quote\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Quote;\n","import React, { Component } from 'react';\nimport axios from 'axios'\nimport Quote from './Quote';\nimport './randomMachine.css'\n\nclass RandomMachine extends Component{\n    static defaultProps={\n        numQuotesToGet:1\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            quote:'',\n            author:''\n        }\n        //this.handleClick=this.handleClick.bind(this);\n    }\n\n   componentDidMount(){\n        //load data\n        if(this.state.quote.length===0) this.getQuote();\n    }\n    async getQuote(){\n        let res=await axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n        let quoteArray=res.data.quotes\n        let randIdx=()=>{return Math.floor(Math.random()*quoteArray.length)}\n        let randomQuote=quoteArray[randIdx()]\n        this.setState({\n            quote: randomQuote.quote,\n            author: randomQuote.author\n        })\n    }\n\n\n    render(){\n        //let allQ=this.state.quote.map(q=><li>{q}</li>)\n\n        return(\n            <div>\n                <i class=\"fas fa-quote-right\"></i>\n                <Quote quote={this.state.quote} author={this.state.author} newQuote={()=>this.getQuote()}/>\n            </div>\n        )\n    }\n}\n\nexport default RandomMachine;","import React from 'react';\nimport RandomMachine from'./RandomMachine';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RandomMachine/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}